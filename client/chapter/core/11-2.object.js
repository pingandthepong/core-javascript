// 참조에 의한 객체 복사
/* ---------------------------------------------------------------------- */
/* Copy object by reference                                               */
/* ---------------------------------------------------------------------- */

// 복사(copy) vs. 참조(reference)

let message = "문자 값은 프리미티브 데이터 타입으로 값이 복사됩니다.";
let messenger = {
  name: "kakao talk",
  manufacture: "kakao",
};

let text = message;
text = "안녕ㅋ";

let conversationTool = messenger;
// conversationTool.name = "line";

// 비교 (복사 vs. 참조)
console.log(message == text);
console.log(message === text);
console.log(messenger == conversationTool);
console.log(messenger === conversationTool);

/* ---------------------------------- 객체 복사 --------------------------------- */
/* -------------------------------------------------------------------------- */
/*                            1. for ~ in 문을 사용한 복사                           */
/* -------------------------------------------------------------------------- */

const cloneObject = {};

for (const key in messenger) {
  cloneObject[key] = messenger[key];
}

console.log(cloneObject);

/* -------------------------------------------------------------------------- */
/*                         2. Object.assign()을 사용한 복사                         */
/* -------------------------------------------------------------------------- */

const copyObject = Object.assign({}, messenger);

// let user = {}
// let clone = Object.assign(user);

/* -------------------------------------------------------------------------- */
/* -------------------------------------------------------------------------- */
/* -------------------------------------------------------------------------- */
/* -------------------------------------------------------------------------- */
/* -------------------------------------------------------------------------- */
/*                           3. 전개 연산자(...)를 사용한 복사                      */
/* -------------------------------------------------------------------------- */
// spread operator 이거 짱 편함 !!!!!!!!!!!!!

const spreadObject = { ...messenger };

/* -------------------------------------------------------------------------- */
/* -------------------------------------------------------------------------- */
/* -------------------------------------------------------------------------- */
/* -------------------------------------------------------------------------- */
/* -------------------------------------------------------------------------- */
/* -------------------------------------------------------------------------- */
/*                             4. 객체를 복사해주는 유틸 함수                        */
/* -------------------------------------------------------------------------- */

const copiedObject = (object) => Object.assign({}, object);

/* -------------------------------------------------------------------------- */
/*                                  객체 병합(합성)                                 */
/* -------------------------------------------------------------------------- */
// 함수 안에서 정말 많이 하는 작업

const cssMapA = {
  color: "#4b004b",
  margin: "0 auto",
};

const cssMapB = {
  display: "flex",
  flexFlow: "column",
  justifyContent: "center",
  padding: "0.4em 0.62em",
  color: "#3f9e97",
};
/* -------------------------------------------------------------------------- */

// let combinedCssMap = Object.assign({}, cssMapA, cssMapB);

/* -------------------------------------------------------------------------- */
/* --------------------------- spread operator 방식 --------------------------- */
let combinedCssMap = { ...cssMapA, ...cssMapB };

/* -------------------------------------------------------------------------- */
// 빈 객체에 두개를 합체해준 것. 중복되는 color값을 나중에 선언된 값으로 덮어쓰여짐
/* -------------------------------------------------------------------------- */
/*                          중첩된 프로퍼티에 객체를 포함하는 객체 복사                          */
/* -------------------------------------------------------------------------- */
// 얕은 복사 vs. 깊은 복사

// 중첩 객체
const containerStyles = {
  "min-height": "100vh",
  "max-width": {
    sm: "90%",
    md: 640,
    lg: 960,
    xl: 1120,
    xxl: 1140,
  },
};

// 얕은 복사
//let copiedContainerStyles = { ...containerStyles };

/* -------------------------------------------------------------------------- */
/*                              1. 깊은 복사 유틸리티 함수                              */
/* -------------------------------------------------------------------------- */
function cloneDeep(object) {
  return Object.fromEntries(
    // return값은 fromEntries
    Object.entries(object).map(([key, value]) => {
      let type = typeof value;
      if (value && type === "object") {
        value = cloneDeep(value); // 재귀함수
      }
      return [key, value];
    })
  );
}

let copiedContainerStyles = cloneDeep(containerStyles);

/* -------------------------------------------------------------------------- */
/*                             2. Lodash 라이브러리 활용                             */
/* -------------------------------------------------------------------------- */
// _.cloneDeep(value)
// 참고: https://lodash.com/docs/4.17.15#cloneDeep
// CDN : https://cdn.jsdelivr.net/npm/lodash@4.17.21/lodash.min.js

/*
<script src="cdn"> 넣고 사용하면 됨
*/
